# 3) Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо
# создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий
# количеству ячеек клетки (целое число). В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение ( __add__() ), вычитание ( __sub__()) ,
# умножение ( __mul__()) , деление ( __truediv__()) . Данные методы должны применяться т олько
# к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением
# до целого) деление клеток, соответственно.
    # 1) Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться
# сумме ячеек исходных двух клеток.
    # 2) Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность
# количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
    # 3) Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как
# произведение количества ячеек этих двух клеток.
    # 4) Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как
# целочисленное деление количества ячеек этих двух клеток.
    # 5) В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и
# количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида * ****\n*****\n*****. .., где количество ячеек между \ n
# равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний
# ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод
# make_order() вернет строку: *****\n*****\n** .
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод
# make_order() вернет строку: *****\n*****\n***** .
# Подсказка: подробный список операторов для перегрузки доступен по ссылке .
#

class Cell:
    pass
    # атрибуты класса:
    # Конструктор с атрибутами объекта:
    def __init__(self, qantity):
        self.qa = qantity
    # методы класса:
    def __add__(self, other):
        return f'Результат сложения клеток: {self.qa + other.qa}\n'

    def __mul__(self, other):
        return f'Результат умножения клеток: {self.qa * other.qa}\n'

    def __sub__(self, other):
        if self.qa > other.qa:
            return f'Результат вычитания клеток: {self.qa - other.qa}'
        else:
            return f'Внимание данное вычитание клеток не допустимо!\nРезультат вычитания клеток будет отричательный: {self.qa - other.qa}\nВведите корректные данные!\n'

    def __floordiv__(self, other):
        if self.qa > other.qa:
            return f'Результат деления клеток: {self.qa // other.qa}\n'
        else:
            return f'Результат деления клеток: {other.qa // self.qa}\n'

    def make_order(self, rows):
        print(f'\nВнимание!\nСейчас вылетит Звездочка!\n')

        while self.qa > 0:
            if self.qa - rows > 0:
                print("*" * rows)
                self.qa -= rows
            else:
                print('*' * self.qa)
                self.qa = 0

    # def __str__(self):
    #     return f'результат вычиcления: {self.qa}'

# Объект класса:
cell1 = Cell(17)
cell2 = Cell(12)

cellSum = cell1 + cell2
cellMul = cell1 * cell2
cellSub = cell2 - cell1
cellDiv = cell1 // cell2

print(cellSum)
print(cellMul)
print(cellSub)
print(cellDiv)

cell1.make_order(4)
cell2.make_order(5)